import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const geminiApiKey = Deno.env.get('GEMINI_API_KEY');

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { automationData } = await req.json();

    const prompt = `Du √§r en expert p√• automation och processoptimering. Din uppgift √§r att skapa en detaljerad automation blueprint baserat p√• anv√§ndarens input. 

Analysera noggrant vad anv√§ndaren vill automatisera och skapa en praktisk, genomf√∂rbar plan som:
1. Identifierar exakt vad som kan automatiseras
2. F√∂resl√•r konkreta verktyg och teknologier
3. Bryter ner processen i steg-f√∂r-steg instruktioner
4. Identifierar potentiella utmaningar och l√∂sningar
5. Uppskattar tidsbesparingar och ROI
6. Ger n√§sta steg f√∂r implementation

Var specifik och praktisk. Fokusera p√• v√§rde och genomf√∂rbarhet.

Skapa en automation blueprint f√∂r f√∂ljande scenario:

**Beskrivning:** ${automationData.description}
**Trigger:** ${automationData.trigger}
**Steg:** ${automationData.steps}
**System:** ${automationData.systems}
**Felhantering:** ${automationData.errorHandling}
**F√∂rv√§ntat resultat:** ${automationData.output}
${automationData.notifications ? `**Notifieringar:** ${automationData.notifications}` : ''}
${automationData.conditions ? `**Villkor:** ${automationData.conditions}` : ''}

Strukturera svaret enligt f√∂ljande format:

## üéØ AUTOMATION BLUEPRINT

### Sammanfattning
[Kort beskrivning av vad som kommer automatiseras och dess v√§rde]

### üîç Procesanalys
**Nuvarande situation:**
[Analysera nuvarande manuella process]

**Automation potential:**
[Vad som kan automatiseras och varf√∂r]

### ‚öôÔ∏è Teknisk Implementation

**Rekommenderade verktyg:**
[Konkreta verktyg och plattformar]

**Steg-f√∂r-steg process:**
1. [Detaljerat steg 1]
2. [Detaljerat steg 2]
3. [osv...]

**Integrationer:**
[Hur systemen ska kopplas ihop]

### üõ°Ô∏è Riskhantering & S√§kerhet
[Identifiera risker och f√∂resl√• l√∂sningar]

### üìä F√∂rv√§ntad ROI
**Tidsbesparingar:** [Konkret uppskattning]
**Kostnadsbesparing:** [Om m√∂jligt]
**Kvalitetsf√∂rb√§ttringar:** [Mindre fel, snabbare processing etc]

### üöÄ Implementation Plan
**Fas 1:** [F√∂rsta steg]
**Fas 2:** [N√§sta steg]
**Fas 3:** [Slutliga steg]

**Uppskattat genomf√∂rande:** [Tidsram]

### ‚ö†Ô∏è Potentiella Utmaningar
[Identifiera m√∂jliga hinder och l√∂sningar]

### üéØ N√§sta Steg
[Konkreta √•tg√§rder f√∂r att komma ig√•ng]

G√∂r analysen p√• svenska och var specifik och praktisk.`;

    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${geminiApiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: prompt
          }]
        }],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 2048,
        }
      }),
    });

    if (!response.ok) {
      console.error('Gemini API error:', response.status, await response.text());
      throw new Error(`Gemini API error: ${response.status}`);
    }

    const data = await response.json();
    
    if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {
      console.error('Invalid response format from Gemini:', data);
      throw new Error('Invalid response format from Gemini API');
    }
    
    const blueprint = data.candidates[0].content.parts[0].text;

    return new Response(JSON.stringify({ blueprint }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  } catch (error) {
    console.error('Error in automation-blueprint function:', error);
    return new Response(JSON.stringify({ 
      error: error.message,
      details: 'Failed to generate automation blueprint'
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});