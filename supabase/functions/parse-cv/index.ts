
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('üöÄ Starting enhanced CV parsing with comprehensive soft skills analysis...');
    
    const formData = await req.formData();
    const file = formData.get('file') as File;
    
    if (!file) {
      throw new Error('No file provided');
    }

    console.log('üìÑ Processing file:', file.name, 'Type:', file.type, 'Size:', file.size);

    const openaiApiKey = Deno.env.get('OPENAI_API_KEY');
    if (!openaiApiKey) {
      console.error('‚ùå OPENAI_API_KEY not found');
      throw new Error('OpenAI API key not configured');
    }

    // Enhanced text extraction with improved regex patterns
    let extractedText = '';
    let detectedInfo = {
      emails: [] as string[],
      phones: [] as string[],
      names: [] as string[],
      locations: [] as string[]
    };
    
    try {
      if (file.type === 'application/pdf') {
        console.log('üìÑ Processing PDF with enhanced extraction algorithms...');
        const arrayBuffer = await file.arrayBuffer();
        const uint8Array = new Uint8Array(arrayBuffer);
        
        // Improved PDF text extraction algorithm
        let rawText = '';
        let previousByte = 0;
        
        for (let i = 0; i < uint8Array.length - 1; i++) {
          const byte = uint8Array[i];
          
          // Enhanced character detection
          if (byte >= 32 && byte <= 126) {
            const char = String.fromCharCode(byte);
            
            // Improved character filtering with Swedish characters
            if (char.match(/[a-zA-Z0-9@.\-+()√•√§√∂√Ö√Ñ√ñ√©√â\s]/)) {
              rawText += char;
            }
          } else if ((byte === 10 || byte === 13) && previousByte !== 10 && previousByte !== 13) {
            // Better line break handling
            if (rawText.slice(-1) !== ' ' && rawText.slice(-1) !== '\n') {
              rawText += ' ';
            }
          }
          
          previousByte = byte;
        }
        
        // Enhanced text cleaning
        extractedText = rawText
          .replace(/\s+/g, ' ')
          .replace(/([a-z])([A-Z])/g, '$1 $2') // Add spaces between camelCase
          .replace(/([0-9])([A-Z])/g, '$1 $2') // Add spaces between numbers and caps
          .trim()
          .substring(0, 8000); // Increased text limit for better soft skills analysis
        
        console.log('üìù Enhanced text extraction completed. Sample:', extractedText.substring(0, 300));
        
        // Improved regex patterns for better Swedish/international detection
        const emailRegex = /\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b/g;
        const phoneRegex = /(\+46|0046|0)[0-9\s\-\(\)]{8,15}|[0-9]{2,3}[\s\-]?[0-9]{3}[\s\-]?[0-9]{2,4}[\s\-]?[0-9]{2,4}/g;
        const nameRegex = /\b[A-Z√Ö√Ñ√ñ√â][a-z√•√§√∂√©]+\s+[A-Z√Ö√Ñ√ñ√â][a-z√•√§√∂√©]+(?:\s+[A-Z√Ö√Ñ√ñ√â][a-z√•√§√∂√©]+)*/g;
        const locationRegex = /\b(?:Stockholm|G√∂teborg|Malm√∂|Uppsala|V√§ster√•s|√ñrebro|Link√∂ping|Helsingborg|J√∂nk√∂ping|Norrk√∂ping|Lund|Ume√•|G√§vle|Bor√•s|Eskilstuna|Sundsvall|Sverige|Sweden|Denmark|Norge|Norway|Finland|Copenhagen|Oslo|Helsinki|London|Berlin|Amsterdam|Paris)\b/gi;
        
        detectedInfo.emails = Array.from(new Set([...extractedText.matchAll(emailRegex)].map(m => m[0])));
        detectedInfo.phones = Array.from(new Set([...extractedText.matchAll(phoneRegex)].map(m => m[0].replace(/\s/g, ''))));
        detectedInfo.names = Array.from(new Set([...extractedText.matchAll(nameRegex)].map(m => m[0])));
        detectedInfo.locations = Array.from(new Set([...extractedText.matchAll(locationRegex)].map(m => m[0])));
        
        console.log('üîç Enhanced pattern detection results:', {
          emails: detectedInfo.emails.length,
          phones: detectedInfo.phones.length,
          names: detectedInfo.names.length,
          locations: detectedInfo.locations.length
        });
        
      } else {
        // Handle text files and other formats
        extractedText = await file.text();
        extractedText = extractedText.substring(0, 8000);
        console.log('üìÑ Text file processed, length:', extractedText.length);
      }
      
    } catch (error) {
      console.warn('‚ö†Ô∏è Text extraction partially failed:', error);
      extractedText = `File processing limited for ${file.name}. Detected type: ${file.type}`;
    }

    console.log('ü§ñ Sending to OpenAI with comprehensive soft skills analysis prompt...');

    // Enhanced AI prompt with comprehensive soft skills analysis
    const prompt = `Du √§r en expert p√• CV-analys och mjukv√§rdesanalys. Analysera detta CV MYCKET NOGGRANT f√∂r att extrahera B√ÖDE h√•rd data OCH mjukv√§rden.

DETEKTERAD INFORMATION att prioritera:
Email: ${detectedInfo.emails.length > 0 ? detectedInfo.emails.join(', ') : 'M√ÖSTE HITTAS'}
Telefon: ${detectedInfo.phones.length > 0 ? detectedInfo.phones.join(', ') : 'M√ÖSTE HITTAS'}
Namn: ${detectedInfo.names.length > 0 ? detectedInfo.names.join(', ') : 'M√ÖSTE HITTAS'}
Plats: ${detectedInfo.locations.length > 0 ? detectedInfo.locations.join(', ') : 'Sverige'}

CV FULLTEXT:
${extractedText}

ANALYS-INSTRUKTIONER:

1. H√ÖRD DATA: Extrahera exakt personlig info, tekniska f√§rdigheter, erfarenhet
2. MJUKV√ÑRDEN: Analysera spr√•kbruk, formuleringar och beskrivningar f√∂r att bed√∂ma:
   - Kommunikationsstil (formell/informell, tydlig/teknisk, etc.)
   - Ledarskapsegenskaper (fr√•n projekt, ansvar, team-referenser)
   - V√§rderingar (vad personen betonar som viktigt)
   - Personlighetstyp (analytisk, kreativ, strukturerad, etc.)
   - Teamanpassning (samarbetsf√∂rm√•ga fr√•n beskrivningar)
   - Kulturell fit (v√§rderingar, arbetss√§tt)
   - Anpassningsf√∂rm√•ga (fr√•n jobbbyten, nya teknologier)
   - Innovation (kreativa projekt, nya l√∂sningar, initiativ)

3. SCORING: Ge scores 1-5 f√∂r mjukv√§rden baserat p√• CV:ts inneh√•ll
4. SPR√ÖKANALYS: Analysera hur personen beskriver sig sj√§lv och sina prestationer

Svara ENDAST med denna exakta JSON-struktur:

{
  "personalInfo": {
    "name": "FULLST√ÑNDIGT NAMN",
    "email": "GILTIG EMAIL", 
    "phone": "TELEFONNUMMER",
    "location": "STAD/REGION"
  },
  "experience": {
    "years": "ANTAL √ÖR ERFARENHET",
    "currentRole": "SENASTE ROLL",
    "level": "Junior/Mid/Senior/Expert"
  },
  "skills": {
    "technical": ["TEKNISKA F√ÑRDIGHETER"],
    "languages": ["PROGRAMMERINGSSPR√ÖK"],
    "tools": ["VERKTYG", "SYSTEM"]
  },
  "workHistory": [
    {
      "company": "F√ñRETAG",
      "role": "ROLL", 
      "duration": "PERIOD",
      "description": "BESKRIVNING"
    }
  ],
  "education": [
    {
      "institution": "SKOLA",
      "degree": "UTBILDNING",
      "year": "√ÖR"
    }
  ],
  "softSkills": {
    "communicationStyle": "BED√ñMNING AV KOMMUNIKATIONSSTIL",
    "leadershipStyle": "LEDARSKAPSTYP BASERAT P√Ö CV",
    "values": ["V√ÑRDERING 1", "V√ÑRDERING 2", "V√ÑRDERING 3"],
    "personalityTraits": ["PERSONLIGHETSDRAG 1", "PERSONLIGHETSDRAG 2"],
    "workStyle": "ARBETSSTIL OCH PREFERENSER",
    "teamFit": "TEAMANPASSNING OCH SAMARBETSF√ñRM√ÖGA"
  },
  "scores": {
    "leadership": 1-5,
    "innovation": 1-5,
    "adaptability": 1-5,
    "culturalFit": 1-5,
    "communication": 1-5,
    "teamwork": 1-5
  },
  "analysisInsights": {
    "strengths": ["STYRKA 1", "STYRKA 2"],
    "developmentAreas": ["UTVECKLINGSOMR√ÖDE 1"],
    "careerTrajectory": "KARRI√ÑRUTVECKLING OCH RIKTNING",
    "motivationFactors": ["VAD SOM MOTIVERAR PERSONEN"]
  }
}

VIKTIGT: Basera mjukv√§rden p√• faktisk text fr√•n CV:t. Om information saknas, skriv "Ej tillr√§ckligt underlag" f√∂r den egenskapen.`;

    const openaiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          {
            role: 'system',
            content: 'Du √§r en expertanalytiker f√∂r CV och mjukv√§rdesanalys. Du M√ÖSTE extrahera b√•de h√•rd data och mjukv√§rden med h√∂gsta noggrannhet. Svara ALLTID med korrekt JSON utan extra text. Fokusera s√§rskilt p√• att analysera spr√•kbruk och formuleringar f√∂r att bed√∂ma mjukv√§rden.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.2,
        max_tokens: 3000,
      }),
    });

    if (!openaiResponse.ok) {
      const errorText = await openaiResponse.text();
      console.error('‚ùå OpenAI API error:', errorText);
      throw new Error(`OpenAI API failed: ${openaiResponse.status}`);
    }

    const openaiData = await openaiResponse.json();
    console.log('‚úÖ Enhanced OpenAI response with soft skills received');

    let analysis;
    try {
      const content = openaiData.choices[0]?.message?.content;
      console.log('üîç OpenAI response content preview:', content.substring(0, 300));

      // Enhanced JSON extraction and validation
      const cleanedContent = content.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim();
      const jsonMatch = cleanedContent.match(/\{[\s\S]*\}/);
      
      if (jsonMatch) {
        analysis = JSON.parse(jsonMatch[0]);
        
        // Enhanced data validation and override with detected data
        if (detectedInfo.emails.length > 0 && detectedInfo.emails[0].includes('@')) {
          analysis.personalInfo.email = detectedInfo.emails[0];
          console.log('‚úÖ Email overridden with detected value:', detectedInfo.emails[0]);
        }
        if (detectedInfo.phones.length > 0 && detectedInfo.phones[0].length > 5) {
          analysis.personalInfo.phone = detectedInfo.phones[0];
          console.log('‚úÖ Phone overridden with detected value:', detectedInfo.phones[0]);
        }
        if (detectedInfo.names.length > 0 && detectedInfo.names[0].split(' ').length >= 2) {
          analysis.personalInfo.name = detectedInfo.names[0];
          console.log('‚úÖ Name overridden with detected value:', detectedInfo.names[0]);
        }
        if (detectedInfo.locations.length > 0) {
          analysis.personalInfo.location = detectedInfo.locations[0];
          console.log('‚úÖ Location overridden with detected value:', detectedInfo.locations[0]);
        }
        
        console.log('üìä Enhanced analysis with soft skills completed:', {
          name: analysis.personalInfo.name,
          email: analysis.personalInfo.email,
          softSkillsAnalyzed: !!analysis.softSkills,
          scoresProvided: !!analysis.scores,
          insightsGenerated: !!analysis.analysisInsights
        });
        
      } else {
        throw new Error('No valid JSON found in OpenAI response');
      }
    } catch (parseError) {
      console.error('‚ùå Parse error, using enhanced fallback strategy:', parseError);
      
      // Enhanced fallback with soft skills structure
      analysis = {
        personalInfo: {
          name: detectedInfo.names[0] || 'HITTAS EJ',
          email: detectedInfo.emails[0] || 'HITTAS EJ',
          phone: detectedInfo.phones[0] || 'HITTAS EJ',
          location: detectedInfo.locations[0] || 'Sverige'
        },
        experience: {
          years: 'Ej specificerat',
          currentRole: 'Ej specificerat',
          level: 'Ej specificerat'
        },
        skills: {
          technical: [],
          languages: [],
          tools: []
        },
        workHistory: [],
        education: [],
        softSkills: {
          communicationStyle: 'Ej tillr√§ckligt underlag',
          leadershipStyle: 'Ej tillr√§ckligt underlag',
          values: [],
          personalityTraits: [],
          workStyle: 'Ej tillr√§ckligt underlag',
          teamFit: 'Ej tillr√§ckligt underlag'
        },
        scores: {
          leadership: 3,
          innovation: 3,
          adaptability: 3,
          culturalFit: 3,
          communication: 3,
          teamwork: 3
        },
        analysisInsights: {
          strengths: [],
          developmentAreas: [],
          careerTrajectory: 'Ej tillr√§ckligt underlag',
          motivationFactors: []
        }
      };
    }

    console.log('‚úÖ Comprehensive CV analysis with soft skills completed successfully');

    return new Response(
      JSON.stringify({ 
        success: true, 
        analysis: analysis,
        detectedInformation: detectedInfo,
        extractionStats: {
          textLength: extractedText.length,
          emailsFound: detectedInfo.emails.length,
          phonesFound: detectedInfo.phones.length,
          namesFound: detectedInfo.names.length,
          locationsFound: detectedInfo.locations.length,
          aiModel: 'gpt-4o-mini-enhanced-soft-skills',
          extractionQuality: 'comprehensive'
        }
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );

  } catch (error) {
    console.error('‚ùå Enhanced CV parsing with soft skills error:', error);
    
    return new Response(
      JSON.stringify({ 
        success: false,
        error: error.message,
        extractionQuality: 'failed'
      }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});
