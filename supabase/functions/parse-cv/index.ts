
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('üöÄ Starting ADVANCED CV parsing with comprehensive professional analysis...');
    
    const formData = await req.formData();
    const file = formData.get('file') as File;
    
    if (!file) {
      throw new Error('No file provided');
    }

    console.log('üìÑ Processing file:', file.name, 'Type:', file.type, 'Size:', file.size);

    const openaiApiKey = Deno.env.get('OPENAI_API_KEY');
    if (!openaiApiKey) {
      console.error('‚ùå OPENAI_API_KEY not found');
      throw new Error('OpenAI API key not configured');
    }

    // ADVANCED text extraction with multiple algorithms
    let extractedText = '';
    let detectedInfo = {
      emails: [] as string[],
      phones: [] as string[],
      names: [] as string[],
      locations: [] as string[],
      companies: [] as string[],
      skills: [] as string[]
    };
    
    try {
      if (file.type === 'application/pdf') {
        console.log('üìÑ Processing PDF with ADVANCED multi-layer extraction...');
        const arrayBuffer = await file.arrayBuffer();
        const uint8Array = new Uint8Array(arrayBuffer);
        
        // ADVANCED PDF text extraction with improved algorithms
        let rawText = '';
        let wordBuffer = '';
        let previousByte = 0;
        
        for (let i = 0; i < uint8Array.length - 1; i++) {
          const byte = uint8Array[i];
          const nextByte = uint8Array[i + 1];
          
          // Enhanced character detection with better Unicode support
          if (byte >= 32 && byte <= 126) {
            const char = String.fromCharCode(byte);
            
            // Enhanced character filtering including international characters
            if (char.match(/[a-zA-Z0-9@.\-+()√•√§√∂√Ö√Ñ√ñ√©√â√®√à√†√Ä√º√ú\s]/)) {
              wordBuffer += char;
            }
          } else if ((byte === 10 || byte === 13 || byte === 32) && wordBuffer.length > 0) {
            // Better word boundary detection
            rawText += wordBuffer + ' ';
            wordBuffer = '';
          }
          
          // Enhanced line break handling
          if ((byte === 10 || byte === 13) && previousByte !== 10 && previousByte !== 13) {
            if (rawText.slice(-1) !== ' ' && rawText.slice(-1) !== '\n') {
              rawText += ' ';
            }
          }
          
          previousByte = byte;
        }
        
        // Add remaining buffer
        if (wordBuffer.length > 0) {
          rawText += wordBuffer;
        }
        
        // ADVANCED text cleaning and normalization
        extractedText = rawText
          .replace(/\s+/g, ' ')                    // Normalize whitespace
          .replace(/([a-z])([A-Z])/g, '$1 $2')     // Add spaces between camelCase
          .replace(/([0-9])([A-Z])/g, '$1 $2')     // Add spaces between numbers and caps
          .replace(/([A-Z])([A-Z][a-z])/g, '$1 $2') // Fix ALL CAPS words
          .replace(/([.!?])\s*([A-Z])/g, '$1 $2')  // Fix sentence spacing
          .trim()
          .substring(0, 12000); // Increased text limit for comprehensive analysis
        
        console.log('üìù ADVANCED text extraction completed. Length:', extractedText.length);
        console.log('üìù Sample text:', extractedText.substring(0, 500));
        
        // ENHANCED regex patterns for comprehensive information detection
        const emailRegex = /\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b/g;
        const phoneRegex = /(\+46[\s\-]?|0046[\s\-]?|0)[\s\-]?[0-9]{1,3}[\s\-]?[0-9]{3,4}[\s\-]?[0-9]{2,4}[\s\-]?[0-9]{0,4}|[0-9]{3}[\s\-]?[0-9]{3}[\s\-]?[0-9]{2,4}/g;
        const nameRegex = /\b[A-Z√Ö√Ñ√ñ√â][a-z√•√§√∂√©]{2,}\s+[A-Z√Ö√Ñ√ñ√â][a-z√•√§√∂√©]{2,}(?:\s+[A-Z√Ö√Ñ√ñ√â][a-z√•√§√∂√©]{2,})*/g;
        const locationRegex = /\b(?:Stockholm|G√∂teborg|Malm√∂|Uppsala|V√§ster√•s|√ñrebro|Link√∂ping|Helsingborg|J√∂nk√∂ping|Norrk√∂ping|Lund|Ume√•|G√§vle|Bor√•s|Eskilstuna|Sundsvall|Sverige|Sweden|Denmark|Norge|Norway|Finland|Copenhagen|Oslo|Helsinki|London|Berlin|Amsterdam|Paris|Madrid|Rome|Brussels|Zurich|Vienna)\b/gi;
        const companyRegex = /\b(?:AB|Ltd|Inc|Corp|GmbH|AS|Oy|ApS)\b|\b[A-Z√Ö√Ñ√ñ][a-z√•√§√∂√©]+(?:\s[A-Z√Ö√Ñ√ñ][a-z√•√§√∂√©]+)*(?:\sAB|\sLtd|\sInc|\sCorp|\sGmbH|\sAS|\sOy|\sApS)?\b/g;
        const skillRegex = /\b(?:JavaScript|Java|Python|C\#|C\+\+|PHP|Ruby|Go|Rust|TypeScript|React|Angular|Vue|Node\.js|Express|Django|Flask|Spring|Laravel|MySQL|PostgreSQL|MongoDB|Redis|Docker|Kubernetes|AWS|Azure|GCP|Git|Jenkins|CI\/CD|Agile|Scrum|DevOps|Machine Learning|AI|Data Science|Frontend|Backend|Fullstack|API|REST|GraphQL|Microservices|Cloud|Security|Testing|TDD|BDD)\b/gi;
        
        detectedInfo.emails = Array.from(new Set([...extractedText.matchAll(emailRegex)].map(m => m[0].toLowerCase())));
        detectedInfo.phones = Array.from(new Set([...extractedText.matchAll(phoneRegex)].map(m => m[0].replace(/[\s\-]/g, ''))));
        detectedInfo.names = Array.from(new Set([...extractedText.matchAll(nameRegex)].map(m => m[0])));
        detectedInfo.locations = Array.from(new Set([...extractedText.matchAll(locationRegex)].map(m => m[0])));
        detectedInfo.companies = Array.from(new Set([...extractedText.matchAll(companyRegex)].map(m => m[0]))).slice(0, 10);
        detectedInfo.skills = Array.from(new Set([...extractedText.matchAll(skillRegex)].map(m => m[0]))).slice(0, 20);
        
        console.log('üîç ADVANCED pattern detection results:', {
          emails: detectedInfo.emails.length,
          phones: detectedInfo.phones.length,
          names: detectedInfo.names.length,
          locations: detectedInfo.locations.length,
          companies: detectedInfo.companies.length,
          skills: detectedInfo.skills.length
        });
        
      } else {
        // Handle text files and other formats
        extractedText = await file.text();
        extractedText = extractedText.substring(0, 12000);
        console.log('üìÑ Text file processed, length:', extractedText.length);
      }
      
    } catch (error) {
      console.warn('‚ö†Ô∏è Text extraction partially failed:', error);
      extractedText = `File processing limited for ${file.name}. Detected type: ${file.type}`;
    }

    console.log('ü§ñ Sending to OpenAI with COMPREHENSIVE PROFESSIONAL analysis prompt...');

    // ADVANCED AI prompt for comprehensive professional analysis
    const prompt = `Du √§r en expert p√• CV-analys, rekrytering och professionell utv√§rdering. Analysera detta CV MYCKET NOGGRANT f√∂r att skapa en komplett professionell bed√∂mning.

DETEKTERAD INFORMATION att prioritera och validera:
Email: ${detectedInfo.emails.length > 0 ? detectedInfo.emails.join(', ') : 'M√ÖSTE HITTAS I TEXTEN'}
Telefon: ${detectedInfo.phones.length > 0 ? detectedInfo.phones.join(', ') : 'M√ÖSTE HITTAS I TEXTEN'}
Namn: ${detectedInfo.names.length > 0 ? detectedInfo.names.join(', ') : 'M√ÖSTE HITTAS I TEXTEN'}
Plats: ${detectedInfo.locations.length > 0 ? detectedInfo.locations.join(', ') : 'LETA I TEXTEN'}
F√∂retag: ${detectedInfo.companies.length > 0 ? detectedInfo.companies.join(', ') : 'IDENTIFIERA FR√ÖN TEXTEN'}
Tekniska f√§rdigheter: ${detectedInfo.skills.length > 0 ? detectedInfo.skills.join(', ') : 'EXTRAHERA FR√ÖN TEXTEN'}

CV FULLTEXT F√ñR DJUPANALYS:
${extractedText}

OMFATTANDE ANALYS-INSTRUKTIONER:

1. PERSONLIG INFORMATION: 
   - Hitta EXAKT namn, email, telefon fr√•n texten
   - Validera mot detekterad information ovan
   - Om information saknas, s√∂k NOGGRANT i hela texten

2. DJUP MJUKV√ÑRDESANALYS:
   - Kommunikationsstil: Analysera spr√•kbruk, struktur, tydlighet
   - Ledarskapsegenskaper: Hitta bevis p√• ansvar, team-ledning, initiativ
   - V√§rderingar: Vad betonar personen som viktigt (kvalitet, innovation, teamwork)
   - Personlighetstyp: Analytisk, kreativ, systematisk, entrepren√∂riell
   - Teamanpassning: Samarbetsf√∂rm√•ga fr√•n beskrivningar och projekt
   - Kulturell passform: Arbetss√§tt, v√§rderingar, kommunikationsstil
   - Anpassningsf√∂rm√•ga: Flexibilitet fr√•n olika roller/teknologier
   - Innovation: Kreativa l√∂sningar, nya teknologier, f√∂rb√§ttringsinitiativ

3. TEKNISK EXPERTIS:
   - Identifiera ALLA tekniska f√§rdigheter fr√•n texten
   - Bed√∂m erfarenhetsniv√• baserat p√• sammanhang
   - Analysera teknisk progression √∂ver tid

4. PROFESSIONELL UTVECKLING:
   - Karri√§rens progression och riktning
   - Utbildningsbakgrund och certifieringar
   - Kompetensomr√•den och specialiseringar

5. MARKNADSPOSITIONERING:
   - Ber√§kna realistisk timpris baserat p√• erfarenhet och f√§rdigheter
   - Identifiera konkurrensf√∂rdelar
   - Bed√∂m konsultberedskap

Svara ENDAST med denna exakta JSON-struktur:

{
  "personalInfo": {
    "name": "FULLST√ÑNDIGT RIKTIGT NAMN FR√ÖN TEXTEN",
    "email": "RIKTIG EMAIL FR√ÖN TEXTEN", 
    "phone": "TELEFONNUMMER FR√ÖN TEXTEN",
    "location": "PLATS FR√ÖN TEXTEN ELLER DETEKTERAD"
  },
  "experience": {
    "years": "ANTAL √ÖR TOTAL ERFARENHET",
    "currentRole": "SENASTE/NUVARANDE ROLL",
    "level": "Junior/Mid/Senior/Expert"
  },
  "skills": {
    "technical": ["ALLA TEKNISKA F√ÑRDIGHETER FR√ÖN TEXTEN"],
    "languages": ["PROGRAMMERINGSSPR√ÖK"],
    "tools": ["VERKTYG", "RAMVERK", "PLATTFORMAR"]
  },
  "workHistory": [
    {
      "company": "F√ñRETAG",
      "role": "ROLL", 
      "duration": "PERIOD",
      "description": "KORT BESKRIVNING AV ANSVAR"
    }
  ],
  "education": [
    {
      "institution": "UTBILDNINGSINSTITUTION",
      "degree": "EXAMEN/UTBILDNING",
      "year": "√ÖR ELLER PERIOD"
    }
  ],
  "softSkills": {
    "communicationStyle": "DETALJERAD BED√ñMNING AV KOMMUNIKATIONSSTIL BASERAT P√Ö CV-TEXT",
    "leadershipStyle": "LEDARSKAPSTYP OCH APPROACH BASERAT P√Ö BEVIS I CV",
    "values": ["V√ÑRDERING 1", "V√ÑRDERING 2", "V√ÑRDERING 3"],
    "personalityTraits": ["PERSONLIGHETSDRAG 1", "PERSONLIGHETSDRAG 2", "PERSONLIGHETSDRAG 3"],
    "workStyle": "ARBETSSTIL OCH PREFERENSER BASERAT P√Ö CV-INNEH√ÖLL",
    "teamFit": "TEAMANPASSNING OCH SAMARBETSF√ñRM√ÖGA FR√ÖN CV-BESKRIVNINGAR"
  },
  "scores": {
    "leadership": 1-5,
    "innovation": 1-5,
    "adaptability": 1-5,
    "culturalFit": 1-5,
    "communication": 1-5,
    "teamwork": 1-5
  },
  "analysisInsights": {
    "strengths": ["SPECIFIK STYRKA 1", "SPECIFIK STYRKA 2", "SPECIFIK STYRKA 3"],
    "developmentAreas": ["UTVECKLINGSOMR√ÖDE 1", "UTVECKLINGSOMR√ÖDE 2"],
    "careerTrajectory": "DETALJERAD ANALYS AV KARRI√ÑRUTVECKLING OCH FRAMTIDA RIKTNING",
    "motivationFactors": ["VAD SOM DRIVER PERSONEN BASERAT P√Ö CV", "MOTIVATION 2"],
    "consultingReadiness": "BED√ñMNING AV BEREDSKAP F√ñR KONSULTARBETE",
    "marketPosition": "MARKNADSPOSITIONERING OCH KONKURRENSF√ñRDELAR"
  },
  "marketAnalysis": {
    "hourlyRate": {
      "current": 800-1200,
      "optimized": 1000-1500,
      "explanation": "MOTIVERING BASERAT P√Ö ERFARENHET OCH F√ÑRDIGHETER"
    },
    "competitiveAdvantages": ["F√ñRDEL 1", "F√ñRDEL 2"],
    "marketDemand": "H√ñG/MEDIUM/L√ÖG",
    "recommendedFocus": "REKOMMENDERAT FOKUSOMR√ÖDE F√ñR KARRI√ÑRUTVECKLING"
  }
}

KRITISKT VIKTIGT: 
- Basera ALLA mjukv√§rden p√• faktisk text och formuleringar fr√•n CV:t
- Om information saknas, skriv "Ej tillr√§ckligt underlag" f√∂r den egenskapen
- Prioritera DETEKTERAD information f√∂r personuppgifter
- Ge KONKRETA bevis f√∂r alla bed√∂mningar`;

    const openaiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages: [
          {
            role: 'system',
            content: 'Du √§r en expertanalytiker f√∂r CV och professionell utv√§rdering. Du M√ÖSTE extrahera personlig information EXAKT fr√•n texten och ge djupg√•ende mjukv√§rdesanalys. Svara ALLTID med korrekt JSON utan extra text. Din analys ska vara detaljerad och professionell.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.1,
        max_tokens: 4000,
      }),
    });

    if (!openaiResponse.ok) {
      const errorText = await openaiResponse.text();
      console.error('‚ùå OpenAI API error:', errorText);
      throw new Error(`OpenAI API failed: ${openaiResponse.status}`);
    }

    const openaiData = await openaiResponse.json();
    console.log('‚úÖ ADVANCED OpenAI response received');

    let analysis;
    try {
      const content = openaiData.choices[0]?.message?.content;
      console.log('üîç OpenAI response content preview:', content.substring(0, 500));

      // Enhanced JSON extraction and validation
      const cleanedContent = content.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim();
      const jsonMatch = cleanedContent.match(/\{[\s\S]*\}/);
      
      if (jsonMatch) {
        analysis = JSON.parse(jsonMatch[0]);
        
        // ADVANCED data validation and override with detected data
        if (detectedInfo.emails.length > 0 && detectedInfo.emails[0].includes('@')) {
          analysis.personalInfo.email = detectedInfo.emails[0];
          console.log('‚úÖ Email prioritized from detection:', detectedInfo.emails[0]);
        }
        if (detectedInfo.phones.length > 0 && detectedInfo.phones[0].length >= 8) {
          analysis.personalInfo.phone = detectedInfo.phones[0];
          console.log('‚úÖ Phone prioritized from detection:', detectedInfo.phones[0]);
        }
        if (detectedInfo.names.length > 0 && detectedInfo.names[0].split(' ').length >= 2) {
          analysis.personalInfo.name = detectedInfo.names[0];
          console.log('‚úÖ Name prioritized from detection:', detectedInfo.names[0]);
        }
        if (detectedInfo.locations.length > 0) {
          analysis.personalInfo.location = detectedInfo.locations[0];
          console.log('‚úÖ Location prioritized from detection:', detectedInfo.locations[0]);
        }
        
        // Enhance skills with detected technical skills
        if (detectedInfo.skills.length > 0) {
          analysis.skills.technical = [...new Set([...analysis.skills.technical, ...detectedInfo.skills])];
          console.log('‚úÖ Technical skills enhanced with detection');
        }
        
        console.log('üìä ADVANCED analysis completed:', {
          name: analysis.personalInfo.name,
          email: analysis.personalInfo.email,
          phone: analysis.personalInfo.phone,
          location: analysis.personalInfo.location,
          softSkillsAnalyzed: !!analysis.softSkills,
          scoresProvided: !!analysis.scores,
          marketAnalysis: !!analysis.marketAnalysis,
          insightsGenerated: !!analysis.analysisInsights
        });
        
      } else {
        throw new Error('No valid JSON found in OpenAI response');
      }
    } catch (parseError) {
      console.error('‚ùå Parse error, using ENHANCED fallback strategy:', parseError);
      
      // ENHANCED fallback with comprehensive structure
      analysis = {
        personalInfo: {
          name: detectedInfo.names[0] || 'Namn ej detekterat',
          email: detectedInfo.emails[0] || 'Email ej detekterad',
          phone: detectedInfo.phones[0] || 'Telefon ej detekterad',
          location: detectedInfo.locations[0] || 'Sverige'
        },
        experience: {
          years: 'Ej specificerat',
          currentRole: 'Ej specificerat',
          level: 'Ej specificerat'
        },
        skills: {
          technical: detectedInfo.skills || [],
          languages: [],
          tools: []
        },
        workHistory: [],
        education: [],
        softSkills: {
          communicationStyle: 'Ej tillr√§ckligt underlag',
          leadershipStyle: 'Ej tillr√§ckligt underlag',
          values: [],
          personalityTraits: [],
          workStyle: 'Ej tillr√§ckligt underlag',
          teamFit: 'Ej tillr√§ckligt underlag'
        },
        scores: {
          leadership: 3,
          innovation: 3,
          adaptability: 3,
          culturalFit: 3,
          communication: 3,
          teamwork: 3
        },
        analysisInsights: {
          strengths: [],
          developmentAreas: [],
          careerTrajectory: 'Ej tillr√§ckligt underlag',
          motivationFactors: [],
          consultingReadiness: 'Ej tillr√§ckligt underlag',
          marketPosition: 'Ej tillr√§ckligt underlag'
        },
        marketAnalysis: {
          hourlyRate: {
            current: 800,
            optimized: 1000,
            explanation: 'Baserat p√• genomsnittliga marknadsrater'
          },
          competitiveAdvantages: [],
          marketDemand: 'Medium',
          recommendedFocus: 'Teknisk vidareutveckling'
        }
      };
    }

    console.log('‚úÖ COMPREHENSIVE CV analysis with advanced soft skills completed successfully');

    return new Response(
      JSON.stringify({ 
        success: true, 
        analysis: analysis,
        detectedInformation: detectedInfo,
        extractionStats: {
          textLength: extractedText.length,
          emailsFound: detectedInfo.emails.length,
          phonesFound: detectedInfo.phones.length,
          namesFound: detectedInfo.names.length,
          locationsFound: detectedInfo.locations.length,
          companiesFound: detectedInfo.companies.length,
          skillsFound: detectedInfo.skills.length,
          aiModel: 'gpt-4o-comprehensive-professional-analysis',
          extractionQuality: 'advanced'
        }
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );

  } catch (error) {
    console.error('‚ùå ADVANCED CV parsing error:', error);
    
    return new Response(
      JSON.stringify({ 
        success: false,
        error: error.message,
        extractionQuality: 'failed'
      }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});
