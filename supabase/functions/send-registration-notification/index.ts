
import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
import { Resend } from "npm:resend@2.0.0";

const resend = new Resend(Deno.env.get("RESEND_API_KEY"));

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers":
    "authorization, x-client-info, apikey, content-type",
};

interface NotificationRequest {
  consultantName: string;
  consultantEmail: string;
  isMyConsultant?: boolean;
}

const handler = async (req: Request): Promise<Response> => {
  console.log('üîî Registration notification function called');
  console.log('üîë RESEND_API_KEY exists:', !!Deno.env.get("RESEND_API_KEY"));
  
  // Handle CORS preflight requests
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { consultantName, consultantEmail, isMyConsultant }: NotificationRequest = await req.json();
    
    console.log('üìß Sending registration notification:', { consultantName, consultantEmail, isMyConsultant });

    // Generate profile access password
    const profilePassword = `${consultantName.toLowerCase().replace(/\s+/g, '')}123`;

    console.log("üöÄ About to send admin notification via Resend...");

    // Send notification to Marc using verified sender
    const adminEmailResponse = await resend.emails.send({
      from: "MatchWise Notifications <noreply@matchwise.tech>",
      to: ["marc@matchwise.tech"],
      subject: `üéâ New ${isMyConsultant ? 'Team' : 'Network'} Consultant Registration`,
      html: `
        <h2>üÜï New Consultant Registration</h2>
        
        <div style="background: #f8fafc; padding: 20px; border-radius: 8px; margin: 20px 0;">
          <h3 style="color: #1e40af; margin-top: 0;">Consultant Details</h3>
          <p><strong>Name:</strong> ${consultantName}</p>
          <p><strong>Email:</strong> ${consultantEmail}</p>
          <p><strong>Type:</strong> ${isMyConsultant ? 'Team Consultant' : 'Network Consultant'}</p>
          <p><strong>Registration Time:</strong> ${new Date().toLocaleString('sv-SE')}</p>
        </div>
        
        <div style="background: #ecfdf5; padding: 20px; border-radius: 8px; margin: 20px 0;">
          <h3 style="color: #059669; margin-top: 0;">Profile Access Information</h3>
          <p><strong>Profile URL:</strong> matchwise.tech/my-profile</p>
          <p><strong>Login Email:</strong> ${consultantEmail}</p>
          <p><strong>Password:</strong> ${profilePassword}</p>
        </div>
        
        <div style="background: #fef3c7; padding: 20px; border-radius: 8px; margin: 20px 0;">
          <h3 style="color: #92400e; margin-top: 0;">Next Steps</h3>
          <ul>
            <li>Review the consultant's profile in the admin panel</li>
            <li>Verify their CV and LinkedIn analysis results</li>
            <li>Consider reaching out for high-potential candidates</li>
            <li>Monitor their profile completion status</li>
          </ul>
        </div>
        
        <p style="margin-top: 30px;">
          <a href="https://matchwise.tech/matchwiseai" 
             style="background: #3b82f6; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; font-weight: 600;">
            View in Admin Panel ‚Üí
          </a>
        </p>
        
        <hr style="margin: 30px 0; border: none; border-top: 1px solid #e5e7eb;">
        
        <p style="color: #6b7280; font-size: 14px;">
          This notification was automatically generated by the MatchWise consultant registration system.
        </p>
      `,
    });

    console.log("‚úÖ Admin notification sent:", JSON.stringify(adminEmailResponse, null, 2));

    if (adminEmailResponse.error) {
      console.error("‚ùå Resend error:", adminEmailResponse.error);
      throw new Error(`Resend error: ${JSON.stringify(adminEmailResponse.error)}`);
    }

    return new Response(JSON.stringify({ 
      success: true, 
      adminEmailId: adminEmailResponse.data?.id,
      emailResponse: adminEmailResponse
    }), {
      status: 200,
      headers: {
        "Content-Type": "application/json",
        ...corsHeaders,
      },
    });
  } catch (error: any) {
    console.error("‚ùå Error in registration notification:", error);
    console.error("‚ùå Error stack:", error.stack);
    return new Response(
      JSON.stringify({ 
        error: error.message,
        details: error.stack,
        type: 'registration_notification_error'
      }),
      {
        status: 500,
        headers: { "Content-Type": "application/json", ...corsHeaders },
      }
    );
  }
};

serve(handler);
